multistore apk
first we store the theme perferences using the
    -> shared preferences for storing the dark or light theme
        -> this thing was demonstrated on the
            ->services
                ->dark theme preferences file
                -> this shared preferences uses the async and await keywords
                -> we first intialized the variable which is static holds one memory space
                    -> we assign some string to hold the value
                        ->in our case we use "STATUSTHEME"
                            ->static var StatusTheme = "STATUSTHEME";
                        ->this used in getter and setter method
                -> now we will implement the setTheme method
                    -> setTheme method as the arguments Bool value
                        -> value should be either true or false to set the theme
                    -> intialising the object for the shared preference class
                        ->import statement for preference
                            ->import 'package:shared_preferences/shared_preferences.dart';
                        -> SharedPreferences pref = await SharedPreferences.getInstance();
                            ->here the getInstance is used for loads and parses the shared preference from the disk
                        ->to store the value in the local disk
                            -> pref.getBool(StatusTheme,value)
                                ->the value is passed from the argument
                                -> StatusTheme is a static variable to store the boolean value
                                ->pref object can store string,double,int etc
                -> now we will implement the getter method without using getter
                    ->getTheme method is used to read the values from the disk
                        ->get method consists of future return back from the method
                            ->Future works same like the try and catch
                            ->it should return the value or handle the error
                            ->Future <bool> getTheme() async{
                    -> intialising the object the same as in the setter method
                    ->we can get the value from the disk
                        ->return prefs.getBool(StatusTheme) ?? false;
                            -> returns the boolean value or error
                            ->?? is used to intialize default value to false
                                -> which means darktheme to false
                            ->   prefs.getBool(StatusTheme) if it fails to get value it will defaultly assign value to false
                -> code for the shared preference
                        import 'package:shared_preferences/shared_preferences.dart';
                        //used to store the dark theme value in bool
                        class Dark_theme_pref{
                          static var StatusTheme = "STATUSTHEME";
                          setTheme(bool value) async{
                            SharedPreferences pref = await SharedPreferences.getInstance();
                            pref.setBool(StatusTheme, value);
                          }
                          Future <bool> getTheme() async{
                            SharedPreferences prefs = await SharedPreferences.getInstance();
                            return prefs.getBool(StatusTheme) ?? false;
                          }
                        }
    -> provider is used to check the user as changed the theme or not
        ->with keyword
            ->with keyword is used to define the multilevel inheritance
            ->it means that the method cannot be implemented in one class
            ->refer "stackflow :.com/questions/57243896/with-keyword-in-flutter"
        -> here class themeProvider with ChangeNotifier{
            ->themeProvider is the class name
            -> here we can use extend or with (maxin) to inherit the methods in changeNotifier
                -> for importing change notifier
                    ->import 'package:flutter/cupertino.dart';
                        ->this library should downloaded from "provider"
            -> we intialize darktheme with false as datatype bool
            -> create the objec of shared preference to get or set the value
                ->Dark_theme_pref pref = Dark_theme_pref();
            ->in above we used the get and set as methods to implement
                ->in this we use the getter and setters as short and functions
                    ->ie getter and setters are the keywords to get or set the value
            -> it should get the theme from shared preference and stored darktheme variable declared above
                ->bool get getDarktheme => darktheme;
                    ->here bool is the return type
                    ->getDarktheme is method name prefixed with get
                        -> get will return a value
            ->set method used to set the value for the shared preference method
                 ->here the setter method should implement the body
                    -> set setDarktheme(bool value){
                          darktheme = value;
                          pref.setTheme(value);
                          notifyListeners();
                        }
                 -> setter method will not have the return type
                    ->we assign the value to the darktheme
                    ->we pref settheme is used to change the value in the disk
                    -> notifyListners will listen and rebuilt the widgets
            -> complete code for the shared preferences
                ->// this is used to check the change and from user
                  import 'package:flutter/cupertino.dart';
                  import 'package:flutter_proj/services/darktheme_preferences.dart';
                  class themeProvider with ChangeNotifier{
                    bool darktheme = false;
                    Dark_theme_pref pref = Dark_theme_pref();
                    bool get getDarktheme => darktheme;
                    set setDarktheme(bool value){
                      darktheme = value;
                      pref.setTheme(value);
                      notifyListeners();
                    }


                  }
    ->this peice code to is used  get the theme from disk and stored in the main method
        ->themeProvider themeprovider = themeProvider();

            void gettheme() async{
              themeprovider.setDarktheme = await themeprovider.pref.getTheme();
            }
            -> themeprovider.pref.getTheme() this data was getting from the shared preferences
            -> setting for the setDarktheme
    -> initState is called only once when the stateful widget is called
        @override
          void initState() {
            // TODO: implement initState
          gettheme();
            super.initState();
          }
          ->@override method is used to override the method in the super class with same method
          -> initState is the best place to call the gettheme method
          ->super.initstate is called in the same method to execute once
      @override
      Widget build(BuildContext context) {
        ->is used to build the widget
          -> here the code starts from here
        -> this method should return widget it may be materialApp or something
        -> buildContext is used to locate where the widget is located in the widget tree
      ->MultiProvider
        ->is used to send some values to the widgets using the providers list
        ->it is used to send multiple providers
      -> ChangeNotifierProvider(create: (_){
                return themeprovider;
              })
         -> eg:Provider<string or class or object>(create: (_){"something"or class contains text or int})
      ->consumer
        -> consumer is used to refuse from the rebuilt of all widgets
         child :Consumer<themeProvider>(
                builder: (context,themeProvider,child) {
                 bool  a = themeprovider.getDarktheme;
                  return MaterialApp(
                  title: 'MultiStore App',
                  theme: Styles.themeData(a, context),
                  debugShowCheckedModeBanner: false,
                  home: Btm_screeen(),
            );
                }
              ),
              consumer <classname to rebuild>
                ->builder widget takes three parameters(context,themeprovider,child)
                ->themeprovider is the dynamic value of class name
                ->here we accessing the object declared with that name
                ->we are assigning the values to var a of type bool
                consumer can return the widget of MaterialApp
      ->materialApp
        ->it consists of title,theme,home etc
        ->title is used to display on the multitask bar
        ->home is used to display at the screen
      ->themeData
          ->const folder
          ->ThemeData.dart
            ->with class name styles
            ->method is static which holds the single value
            ->static ThemeData themeData(bool isDarkTheme,BuildContext context)
                -> ThemeData is widget name which consits so many functions
                ->build context is used for styling the buttons
                ->this method will return themeData for the theme widget
                    ->scaffoldBackgroundColor is used to set the background color of app
                    ->primary color is used for appbar etc
            -> this the complete code for the theme widget
                ->import 'package:flutter/material.dart';
                  class Styles{
                    static ThemeData themeData(bool isDarkTheme,BuildContext context){
                      return ThemeData(
                        scaffoldBackgroundColor:
                        //0A1931  // white yellow 0xFFFCF8EC
                        isDarkTheme ? const Color(0xFF00001a) : const Color(0xFFFFFFFF),
                        primaryColor: Colors.blue,
                        colorScheme: ThemeData().colorScheme.copyWith(
                          secondary:
                          isDarkTheme ? const Color(0xFF1a1f3c) : const Color(0xFFE8FDFD),
                          brightness: isDarkTheme ? Brightness.dark : Brightness.light,
                        ),
                        cardColor:
                        isDarkTheme ? const Color(0xFF0a0d2c) : const Color(0xFFF2FDFD),
                        canvasColor: isDarkTheme ? Colors.black : Colors.grey[50],
                        buttonTheme: Theme.of(context).buttonTheme.copyWith(
                            colorScheme: isDarkTheme
                                ? const ColorScheme.dark()
                                : const ColorScheme.light()),
                      );
                    }
                  }
            -> complete main method code
                import 'package:flutter/material.dart';
                import 'package:flutter_proj/Providers/Theme-provider.dart';
                import 'package:flutter_proj/Screens/Home_screens.dart';
                import 'package:flutter_proj/Screens/btm_screen.dart';
                import 'package:flutter_proj/consts/ThemeData.dart';
                import 'package:flutter_proj/services/darktheme_preferences.dart';
                import 'package:provider/provider.dart';
                void main() {
                  runApp( MyApp());
                }

                class MyApp extends StatefulWidget {
                   MyApp({Key? key}) : super(key: key);

                  @override
                  State<MyApp> createState() => _MyAppState();
                }

                class _MyAppState extends State<MyApp> {
                  themeProvider themeprovider = themeProvider();

                  void gettheme() async{
                    themeprovider.setDarktheme = await themeprovider.pref.getTheme();
                  }
                @override
                  void initState() {
                    // TODO: implement initState
                  gettheme();
                    super.initState();
                  }
                  @override
                  Widget build(BuildContext context) {
                    return MultiProvider(
                      providers: [
                        ChangeNotifierProvider(create: (_){
                          return themeprovider;
                        })
                      ],
                      child :Consumer<themeProvider>(
                        builder: (context,themeProvider,child) {
                         bool  a = themeprovider.getDarktheme;
                          return MaterialApp(
                          title: 'MultiStore App',
                          theme: Styles.themeData(a, context),
                          debugShowCheckedModeBanner: false,
                          home: Btm_screeen(),
                    );
                        }
                      ),
                    );
                  }
                }

    ->from this is displaying the bottom navigation bar
        -> it is easy to develop the bottom navigation bar
            ->first we set Btm_index = 0 of type int
        -> bottom navigation bars contains the default widget from the flutter
            ->bottomNavigationBar : BottomNavigationBar
                ->bottomNavigationBar is the type of the BottomNavigation
                ->BottomNavigationBar contains the serval methods
        ->here is the code below for example
            ->backgroundColor: state ? Theme.of(context).canvasColor: Colors.white,
                      type: BottomNavigationBarType.fixed,//doesnot moves top and bottom
                      showSelectedLabels: false, //this hides the name from the selected tab
                      showUnselectedLabels: false, //this hides the name from the unselected tab
                      selectedItemColor: state ? Colors.lightBlue.shade200: Colors.black87,
                      unselectedItemColor: state ? Colors.white38: Colors.black38,
                      currentIndex: _bottomIndex,
                      onTap: _selectedPage,
                      items: [
                        BottomNavigationBarItem(icon: Icon(_bottomIndex == 0 ? IconlyBold.home:IconlyLight.home,),label: "Home"),
                        BottomNavigationBarItem(icon: Icon(_bottomIndex == 1 ? IconlyBold.category:IconlyLight.category,),label: "Category"),
                        BottomNavigationBarItem(icon: Icon(_bottomIndex == 2 ? IconlyBold.buy:IconlyLight.buy,),label: "Cart"),
                        BottomNavigationBarItem(icon: Icon(_bottomIndex == 3 ? IconlyBold.user2:IconlyLight.user2,),label: "User"),
                      ],
        -> required feild is items
    -> user page contains
        ->address
        ->orders
        ->whislist
        ->viewed
        ->theme
        ->forgot password
        ->Logout
    -> at first we use the scaffold widget to provide basic implementation
        ->like Appbar ,body and etc
        ->we use SingleChildScroll to overcome the scroll
    ->we use column widget to place all the tiles in the in column
        -> mainAxisAlignment: MainAxisAlignment.center,
            -> mainAxisAlignment is used to align the column in the widget
        ->column wiget contains the children list
        -> we create the _list private method to display the ListTile
    -> here code
        ->    final theme = Provider.of<themeProvider>(context);
              final Color color = theme.getDarktheme ? Colors.white: Colors.black;
              return Scaffold(
                body: SingleChildScrollView( //used for the scroll view
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center, //centering the element inside the column widget
                    children:  [
                          _listTiles(title: "Address", icon: IconlyLight.profile, onPressed: (){},subtile: "address",color:color,),
                          _listTiles(title: "Orders", icon: IconlyLight.bag, onPressed: (){},color:color,),
                          _listTiles(title: "Whislist", icon: IconlyLight.heart, onPressed: (){},color:color,),
                          _listTiles(title: "Viewed", icon: IconlyLight.show, onPressed: (){},color:color,),
                      SwitchListTile(onChanged: (bool value){
                        theme.setDarktheme = value;
                      },
                        value: theme.getDarktheme,
                        title : Text("Theme"),
                        secondary: Icon(theme.getDarktheme ?Icons.dark_mode_outlined :Icons.light_mode_outlined),
                      ),
                          _listTiles(title: "Forgot password", icon: IconlyLight.unlock, onPressed: (){},color:color,),
                          _listTiles(title: "Logout", icon: IconlyLight.logout, onPressed: (){},color:color,),
                    ],
                  ),
                ),
              );
            }
            Widget _listTiles({required String title,String? subtile,required IconData icon,required Function onPressed,required color }){
              return ListTile(
                title: TextWidget(title: title,color: color,fontweight: 21,istitle: false,),
                subtitle: TextWidget(title: subtile == null ? "":subtile,color: color,fontweight: 21,istitle: false,),
                leading: Icon(icon),
                trailing: Icon(IconlyLight.arrowRight2),
                onTap: (){onPressed()},//this important because it can return void
              );
            }
    ->widgets
        ->Textwidget
        here the text widget is used to show the text dynamically
            ->overflow property in the style of text widget
                -> overflow.elipse is used
                    -> when the text is fit in the screen it uses (....)
        -> here is the code
              TextWidget({Key? key,required this.title,required this.color,required this.fontweight,this.istitle = false, this.maxlines = 10}) : super(key: key);
              final String title;
              final Color color;
              final double fontweight;
              bool istitle = false;
              int maxlines = 10;
              @override
              Widget build(BuildContext context) {

                return Text(title,style: TextStyle(color: color,fontSize: fontweight,fontWeight:istitle? FontWeight.bold: FontWeight.normal),);
              }
    -> Dialogbox
        ->  to display dialog box we required two methods showDailog and AlertDailog which is the return type of future void
        ->showDailog has two important methods
            ->context , builder
            ->builder takes some parameters to context as the arguments and return AlertDailog
            ->AlertDailog consists of
                -> title <widget>: to display the title in the Dialog
                ->content <widget>: to display the conent of the dialog
                -> action : is used add the buttons to the dialog
            -> below example shows that logout dialog and which is called from ListTile
            ->here is the code for that
                 Future <void> _LogoutModel() async{
                    await showDialog(context: context, builder: (context)=>
                      AlertDialog(
                        title: Row(
                          children: [
                            Image.asset("assets/images/warning-sign.png",width: 20,height: 20,),
                            SizedBox(width: 5,),
                            Text("Sign out")
                          ],
                        ),
                        content: Text("Do you want to logout"),
                        actions: [
                          TextButton(onPressed: (){
                            if(Navigator.canPop(context))
                              Navigator.pop(context);
                          }, child: TextWidget(
                            title: "cancel",
                            color: Colors.cyan,
                            fontweight: 15,
                          )),
                          TextButton(onPressed: (){}, child: TextWidget(
                            title: "logout",
                            color: Colors.red,
                            fontweight: 15,
                          ))
                        ],
                    )
                    );
                  }
    -> grid view for the category Screen
        ->GridView.count is the widget used to display
            ->gridView has the three properties
                ->crossAxisCount this used to display the no of items in the row
                ->childAsceptRatio is used to width and height of item
                ->crossAxisSpacing is used for vertical spacing
                ->mainAxisSpacing is used for horizontal spacing
                ->children is the list of items
                -> here we dynamically generate the list of items using arrays
        ->code for GridView
               child: GridView.count(crossAxisCount: 2,
                        childAspectRatio: (w/(h/1.8)),
                          crossAxisSpacing: 10,
                          mainAxisSpacing: 10,
                          children: List.generate(6, (index){
                            return CategoryWidget(
                              catname: CatInfo[index]['CatNam'],
                              passedColor: colors[index],
                              path: CatInfo[index]['Path'],
                            );
                          }),
                        ),
        -> code for array list CatInfo
               List<Color> colors = [
                 Color(0x35EA0CD4),
                 Color(0xA41BDEFF),
                 Color(0xA4DE610E),
                 Color(0xA413FF0C),
                 Color(0xA4D7CE25),
                 Color(0xA4B8041F),

               ];
              List <Map<String,dynamic>> CatInfo =  [
                {
                  "CatNam" : "fruits","Path":"assets/images/cat/fruits.png"
                },
                {
                  "CatNam" : "Vegtables","Path":"assets/images/cat/veg.png"
                },
                {
                  "CatNam" : "Herbs","Path":"assets/images/cat/Spinach.png"
                },
                {
                  "CatNam" : "Species","Path":"assets/images/cat/spices.png"
                },
                {
                  "CatNam" : "Grains","Path":"assets/images/cat/grains.png"
                },
                {
                  "CatNam" : "Nuts","Path":"assets/images/cat/nuts.png"
                }
              ];
    -> code for category wiget used to generate the items
    constructor for category widget
        CategoryWidget({Key? key,required this.catname,required this.path,required this.passedColor}) : super(key: key);
          final String catname,path;
          final Color passedColor;
        InkWell(
              onTap: (){
                print("container pressed");
              },
              child: Container(
                decoration: BoxDecoration(
                  color: passedColor.withOpacity(0.3),
                  borderRadius: BorderRadius.circular(16),
                  border: Border.all(color: passedColor.withOpacity(0.5),width: 2),
                ),
                child: Column(
                  children: [
                    Container(
                      height: h*0.3,
                      width: h*0.3,
                      decoration: BoxDecoration(
                        image: DecorationImage(
                          image: AssetImage(path),
                          fit: BoxFit.fill
                        )
                      ),
                    ),
                    TextWidget(title: catname, color: color, fontweight: 20,istitle: true,)
                  ],
                ),
              ),
            );
           ->  here container is used to generate image and title for the text
        -> InkWell is the property used to navigate to other pages in the category section
            -> its as on tap method to navigate to other widget
        ->swiper
            -> swiper is used to swipe the images using the pagination
            -> swiper library should be downloaded from the pub.dev
            ->import 'package:card_swiper/card_swiper.dart';
            -> card_swiper: ^2.0.4 should be added to the pubspec.yaml
            -> configuaration is easy code as follows
                 Container(
                            height: size.height * 0.3,
                            child: Swiper(
                              itemBuilder: (BuildContext context, int index) {
                                return Image.asset(
                                  _OfferImages[index],
                                  fit: BoxFit.fill,
                                );
                              },
                              itemCount: _OfferImages.length,
                              autoplay: true,
                              pagination: SwiperPagination(
                                  alignment: Alignment.bottomCenter,
                                  builder: DotSwiperPaginationBuilder(
                                      color: Colors.white, activeColor: Colors.orangeAccent)),
                              // control: SwiperControl(),
                            ),
                          ),
        ->RotatedBox
            ->rotated box is used to rotate the container to any direction
            -> required parameters are :
                ->quarterTurns: -1,
                    -> the quarterTurns is used to rotate to any direction
            ->code for the RotatedBox
                   RotatedBox(
                               quarterTurns: -1,
                             child : Row(
                               children: [
                                  SizedBox(height: 5,),
                                 TextWidget(title: "on sale", color: Colors.red, fontweight: 25),
                                 SizedBox(width: 5,),
                                 Icon(IconlyLight.discount)
                               ],
                             ),
                             ),
        ->flexible
            -> it makes the child widget flexible in the tree
            ->  Flexible(
                       child: Container(
                       height: size.height*0.3,
                       child: ListView.builder(
                         itemCount: 10,
                           scrollDirection: Axis.horizontal,
                           itemBuilder: (ctx,index){
                             return OnSaleWidget();
                           }),
                             ),
                           ),
        ->ListView.builder
            -> ListView.builder is used to produce the number of cards in the screen
            ->required parameters are :
                ->itemCount: int
                ScrollDirection : Axis.direction
                itemBuilder: (context)=> widget

            -> code for the ListView.builder
                     child: ListView.builder(
                             itemCount: 10,
                               scrollDirection: Axis.horizontal,
                               itemBuilder: (ctx,index){
                                 return OnSaleWidget();
                               }),
        ->on sale widget design
            -> widget first has the column
                ->first child is the row
                    -> row
                        -> the consists of image and column widget
                            >in the first column child is Text widget
                            ->second column widget is the row
                                -> its consists of icons and spacing between them
                -> second column widget consists of row to display the price
                    -> textWidget to show original price
                    ->Text to show the actual price
                -> third column to display the product title
            -> code as follows:
        ->Padding(
                padding: const EdgeInsets.only(left: 8.0),
                child: Material(
                  borderRadius: BorderRadius.circular(12),
                  child: InkWell(
                    onTap: (){},
                    child: Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.start,
                        children: [
                          Row(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisAlignment: MainAxisAlignment.start,
                            children: [

                                  FancyShimmerImage(
                                    imageUrl: 'https://media.istockphoto.com/photos/red-apple-picture-id184276818?k=20&m=184276818&s=612x612&w=0&h=QxOcueqAUVTdiJ7DVoCu-BkNCIuwliPEgtAQhgvBA_g=',
                                    height: size.height *0.2,width: size.width*0.25,boxFit: BoxFit.fill,
                                  ),


                              Column(

                                children: [
                                  SizedBox(height: 10,),
                                  TextWidget(title: "1 KG", color: Colors.green, fontweight: 22,istitle: true,),
                                  SizedBox(height: 5,),
                                  Row(
                                    children: [
                                      GestureDetector(
                                        onTap: (){},
                                        child: Icon(IconlyLight.bag2,size: 22,),

                                      ),
                                      SizedBox(width: 5,),
                                      GestureDetector(
                                        onTap: (){},
                                        child: Icon(IconlyLight.heart,size: 22,),
                                      ),
                                    ],
                                  ),
                                ],
                              )
                            ],
                          ),
                          PriceWidget(),
                          SizedBox(height: 2,),
                          TextWidget(title: "Product title", color: color, fontweight: 16)
                        ],
                      ),
                    ),
                  ),
                ),
              );
        -> FancyShimmer image
         -> this is used to preload the image before the image is loaded from the network
         -> package name :import 'package:fancy_shimmer_image/fanc y_shimmer_image.dart';
          -> dependences :   fancy_shimmer_image: ^2.0.2
          -> code as follows
            FancyShimmerImage(
                    imageUrl: 'https://media.istockphoto.com/photos/red-apple-picture-id184276818?k=20&m=184276818&s=612x612&w=0&h=QxOcueqAUVTdiJ7DVoCu-BkNCIuwliPEgtAQhgvBA_g=',
                    height: size.height *0.2,width: size.width*0.25,boxFit: BoxFit.fill,
                  ),

       -> routing to other pages using the InkWell method
            -> first we need to define static keyword for the varible
                -> static varible need not want the intialization
                -> it can be directly accesed using ClassName.variable/ fuction
                ->code for this
                     static  const routeName = '/OnsaleScreen';
            -> we simply intialise the routename = '/classname' as a constant
         -> we need to declare the routes in the materialApp in the main.dart file
            routes is the dictoinory that maps string to widgets
                   -> code for this
                             routes: {
                                 OnsaleScreen.routeName : (context) => OnsaleScreen(),
                                     },
         ->   for routing to next page we have Inkwell consists of method
                    onTap: (){
                           Navigator.PushedName(context,className.routeName//const variable in class);
                    }
                    code for this
                        TextButton(onPressed: (){
                                      GlobalVariable.routeTo(context: context, routeName: OnsaleScreen.routeName);
                                    }, child: Text("View All",style: TextStyle(fontSize: 20,color: Colors.blue),)),
          -> we created the global variable to route the pages dynamically for code reuseability
                ->static routeTo({required BuildContext context,required String routeName}){
                      Navigator.pushNamed(context, routeName);
                    }
                -> note: here the static keyword to access the method without intialiaing
                    eg: className.method/variable;